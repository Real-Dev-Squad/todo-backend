# Generated by Django 5.1.5 on 2024-01-01 00:00:00

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PostgresUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('google_id', models.CharField(max_length=255, unique=True)),
                ('email_id', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('picture', models.URLField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_users',
            },
        ),
        migrations.CreateModel(
            name='PostgresLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_labels',
            },
        ),
        migrations.CreateModel(
            name='PostgresRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('permissions', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_roles',
            },
        ),
        migrations.CreateModel(
            name='PostgresTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('invite_code', models.CharField(max_length=100, unique=True)),
                ('poc_id', models.CharField(blank=True, max_length=24, null=True)),
                ('created_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(max_length=24)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_teams',
            },
        ),
        migrations.CreateModel(
            name='PostgresTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('display_id', models.CharField(blank=True, max_length=100, null=True)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='LOW', max_length=20)),
                ('status', models.CharField(choices=[('TODO', 'To Do'), ('IN_PROGRESS', 'In Progress'), ('REVIEW', 'Review'), ('DONE', 'Done'), ('DEFERRED', 'Deferred')], default='TODO', max_length=20)),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(blank=True, max_length=24, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_tasks',
            },
        ),
        migrations.CreateModel(
            name='PostgresTaskAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('task_mongo_id', models.CharField(max_length=24)),
                ('user_mongo_id', models.CharField(max_length=24)),
                ('team_mongo_id', models.CharField(blank=True, max_length=24, null=True)),
                ('status', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected')], default='ASSIGNED', max_length=20)),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(blank=True, max_length=24, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_task_assignments',
            },
        ),
        migrations.CreateModel(
            name='PostgresWatchlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('user_mongo_id', models.CharField(max_length=24)),
                ('created_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(blank=True, max_length=24, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_watchlists',
            },
        ),
        migrations.CreateModel(
            name='PostgresUserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('user_mongo_id', models.CharField(max_length=24)),
                ('role_mongo_id', models.CharField(max_length=24)),
                ('team_mongo_id', models.CharField(blank=True, max_length=24, null=True)),
                ('created_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(blank=True, max_length=24, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_user_roles',
            },
        ),
        migrations.CreateModel(
            name='PostgresUserTeamDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('user_id', models.CharField(max_length=24)),
                ('team_id', models.CharField(max_length=24)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.CharField(max_length=24)),
                ('updated_by', models.CharField(max_length=24)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_user_team_details',
            },
        ),
        migrations.CreateModel(
            name='PostgresAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mongo_id', models.CharField(blank=True, max_length=24, null=True, unique=True)),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('READ', 'Read'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout')], max_length=20)),
                ('collection_name', models.CharField(max_length=100)),
                ('document_id', models.CharField(max_length=24)),
                ('user_mongo_id', models.CharField(blank=True, max_length=24, null=True)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync_at', models.DateTimeField(auto_now=True)),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending'), ('FAILED', 'Failed')], default='SYNCED', max_length=20)),
                ('sync_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postgres_audit_logs',
            },
        ),
        migrations.CreateModel(
            name='PostgresTaskLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_mongo_id', models.CharField(max_length=24)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_labels', to='todo.postgrestask')),
            ],
            options={
                'db_table': 'postgres_task_labels',
            },
        ),
        migrations.CreateModel(
            name='PostgresWatchlistTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_mongo_id', models.CharField(max_length=24)),
                ('watchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchlist_tasks', to='todo.postgreswatchlist')),
            ],
            options={
                'db_table': 'postgres_watchlist_tasks',
            },
        ),
        migrations.CreateModel(
            name='PostgresDeferredDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deferred_at', models.DateTimeField(blank=True, null=True)),
                ('deferred_till', models.DateTimeField(blank=True, null=True)),
                ('deferred_by', models.CharField(blank=True, max_length=24, null=True)),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='deferred_details', to='todo.postgrestask')),
            ],
            options={
                'db_table': 'postgres_deferred_details',
            },
        ),
        migrations.AddIndex(
            model_name='postgresuser',
            index=models.Index(fields=['mongo_id'], name='postgres_users_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuser',
            index=models.Index(fields=['google_id'], name='postgres_users_google_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuser',
            index=models.Index(fields=['email_id'], name='postgres_users_email_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuser',
            index=models.Index(fields=['sync_status'], name='postgres_users_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreslabel',
            index=models.Index(fields=['mongo_id'], name='postgres_labels_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreslabel',
            index=models.Index(fields=['name'], name='postgres_labels_name_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreslabel',
            index=models.Index(fields=['sync_status'], name='postgres_labels_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresrole',
            index=models.Index(fields=['mongo_id'], name='postgres_roles_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresrole',
            index=models.Index(fields=['name'], name='postgres_roles_name_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresrole',
            index=models.Index(fields=['sync_status'], name='postgres_roles_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresteam',
            index=models.Index(fields=['mongo_id'], name='postgres_teams_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresteam',
            index=models.Index(fields=['invite_code'], name='postgres_teams_invite_code_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresteam',
            index=models.Index(fields=['created_by'], name='postgres_teams_created_by_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresteam',
            index=models.Index(fields=['sync_status'], name='postgres_teams_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['mongo_id'], name='postgres_tasks_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['display_id'], name='postgres_tasks_display_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['status'], name='postgres_tasks_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['priority'], name='postgres_tasks_priority_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['created_by'], name='postgres_tasks_created_by_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['due_at'], name='postgres_tasks_due_at_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestask',
            index=models.Index(fields=['sync_status'], name='postgres_tasks_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['mongo_id'], name='postgres_task_assignments_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['task_mongo_id'], name='postgres_task_assignments_task_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['user_mongo_id'], name='postgres_task_assignments_user_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['team_mongo_id'], name='postgres_task_assignments_team_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['status'], name='postgres_task_assignments_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestaskassignment',
            index=models.Index(fields=['sync_status'], name='postgres_task_assignments_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreswatchlist',
            index=models.Index(fields=['mongo_id'], name='postgres_watchlists_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreswatchlist',
            index=models.Index(fields=['user_mongo_id'], name='postgres_watchlists_user_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreswatchlist',
            index=models.Index(fields=['created_by'], name='postgres_watchlists_created_by_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreswatchlist',
            index=models.Index(fields=['sync_status'], name='postgres_watchlists_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserrole',
            index=models.Index(fields=['mongo_id'], name='postgres_user_roles_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserrole',
            index=models.Index(fields=['user_mongo_id'], name='postgres_user_roles_user_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserrole',
            index=models.Index(fields=['role_mongo_id'], name='postgres_user_roles_role_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserrole',
            index=models.Index(fields=['team_mongo_id'], name='postgres_user_roles_team_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserrole',
            index=models.Index(fields=['sync_status'], name='postgres_user_roles_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserteamdetails',
            index=models.Index(fields=['mongo_id'], name='postgres_user_team_details_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserteamdetails',
            index=models.Index(fields=['user_id'], name='postgres_user_team_details_user_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserteamdetails',
            index=models.Index(fields=['team_id'], name='postgres_user_team_details_team_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserteamdetails',
            index=models.Index(fields=['is_active'], name='postgres_user_team_details_is_active_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresuserteamdetails',
            index=models.Index(fields=['sync_status'], name='postgres_user_team_details_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['mongo_id'], name='postgres_audit_logs_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['action'], name='postgres_audit_logs_action_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['collection_name'], name='postgres_audit_logs_collection_name_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['document_id'], name='postgres_audit_logs_document_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['user_mongo_id'], name='postgres_audit_logs_user_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['timestamp'], name='postgres_audit_logs_timestamp_idx'),
        ),
        migrations.AddIndex(
            model_name='postgresauditlog',
            index=models.Index(fields=['sync_status'], name='postgres_audit_logs_sync_status_idx'),
        ),
        migrations.AddIndex(
            model_name='postgrestasklabel',
            index=models.Index(fields=['label_mongo_id'], name='postgres_task_labels_label_mongo_id_idx'),
        ),
        migrations.AddIndex(
            model_name='postgreswatchlisttask',
            index=models.Index(fields=['task_mongo_id'], name='postgres_watchlist_tasks_task_mongo_id_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postgresuserteamdetails',
            unique_together={('user_id', 'team_id')},
        ),
        migrations.AlterUniqueTogether(
            name='postgresuserrole',
            unique_together={('user_mongo_id', 'role_mongo_id', 'team_mongo_id')},
        ),
        migrations.AlterUniqueTogether(
            name='postgreswatchlisttask',
            unique_together={('watchlist', 'task_mongo_id')},
        ),
        migrations.AlterUniqueTogether(
            name='postgrestasklabel',
            unique_together={('task', 'label_mongo_id')},
        ),
        migrations.AlterUniqueTogether(
            name='postgrestaskassignment',
            unique_together={('task_mongo_id', 'user_mongo_id')},
        ),
    ]
